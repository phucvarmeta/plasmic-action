"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reactStrategy = void 0;
const fs_1 = require("fs");
const glob_1 = __importDefault(require("glob"));
const path_1 = __importDefault(require("path"));
const cmd_utils_1 = require("../utils/cmd-utils");
const codegen_1 = require("../utils/codegen");
const file_utils_1 = require("../utils/file-utils");
const npm_utils_1 = require("../utils/npm-utils");
exports.reactStrategy = {
    create: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { projectPath, jsOrTs } = args;
        let { template } = args;
        /* create-vite package checks if the targetDir doesn't exist then it creates the targetDir in the
          current directory instead of the targetDir path. For example,
          1. Let's say current directory is /tmp/cpa-out
          2. npm create vite@latest /private/tmp/cpa-out/react-codegen-ts will create
          /tmp/cpa-out/private/tmp/cpa-out/react-codegen-ts directory instead of /private/tmp/cpa-out/react-codegen-ts
    
          To avoid this behaviour, we will ensure the fullProjectPath exists
          1. we get the projectName (react-codegen-ts), and parentDir (/private/tmp/cpa-out)
          2. change directory to parentDir and execute the command with projectName
         */
        const fullProjectPath = path_1.default.isAbsolute(projectPath)
            ? projectPath
            : path_1.default.resolve(process.cwd(), projectPath);
        yield fs_1.promises.mkdir(fullProjectPath, { recursive: true });
        const projectName = path_1.default.basename(fullProjectPath);
        const parentDir = path_1.default.dirname(fullProjectPath);
        process.chdir(parentDir);
        const createCommand = `npm create vite@latest ${projectName} --`;
        if (!template) {
            template = jsOrTs === "ts" ? "react-ts" : "react";
        }
        const templateArg = template ? ` --template ${template}` : "";
        yield (0, cmd_utils_1.spawnOrFail)(`${createCommand}${templateArg}`);
    }),
    installDeps: ({ projectPath, scheme }) => __awaiter(void 0, void 0, void 0, function* () {
        if (scheme === "loader") {
            return yield (0, npm_utils_1.installUpgrade)("@plasmicapp/loader-react", {
                workingDir: projectPath,
            });
        }
        else {
            return yield (0, codegen_1.installCodegenDeps)({ projectPath });
        }
    }),
    overwriteConfig: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { projectPath, jsOrTs } = args;
        if (jsOrTs === "ts") {
            const tsConfigJsonPath = path_1.default.join(projectPath, "tsconfig.app.json");
            let tsConfigJson = yield fs_1.promises.readFile(tsConfigJsonPath, "utf8");
            /* tsconfig.app.json has comments such as /* Bundler mode */ /* Linting */
            /* We need to remove them before parsing the json */
            tsConfigJson = tsConfigJson.replace(/\/\*[\s\S]*?\*\//g, "");
            tsConfigJson = tsConfigJson.replace(/\/\/.*$/gm, "");
            const tsConfig = JSON.parse(tsConfigJson);
            /* In our codegen, we have components where React is imported but not used, we need to
              turn off the `noUnusedLocals` rule to ensure the project builds successfully.
             */
            tsConfig.compilerOptions = Object.assign(Object.assign({}, tsConfig.compilerOptions), { noUnusedLocals: false });
            yield fs_1.promises.writeFile(tsConfigJsonPath, JSON.stringify(tsConfig, null, 2));
        }
    }),
    generateFiles: ({ scheme, projectApiToken, projectId, projectPath, jsOrTs, }) => __awaiter(void 0, void 0, void 0, function* () {
        if (scheme === "loader") {
            // Nothing to do
        }
        else {
            // Delete existing App.tsx and related test
            (0, file_utils_1.deleteGlob)(path_1.default.join(projectPath, "src", "App*"));
            console.log("ðŸš€ ~ projectPath:", projectPath);
            yield (0, codegen_1.runCodegenSync)({
                projectId,
                projectApiToken,
                projectPath,
            });
            // Pick a page for the entry point App.tsx page
            const config = yield (0, file_utils_1.getPlasmicConfig)(projectPath, "react", scheme);
            const pagesDir = path_1.default.join(projectPath, config.srcDir);
            const projectConfig = config.projects.find((p) => p.projectId === projectId);
            const globalContextsPath = projectConfig &&
                projectConfig.globalContextsFilePath &&
                config.wrapPagesWithGlobalContexts
                ? path_1.default.join(projectPath, config.srcDir, projectConfig.globalContextsFilePath)
                : undefined;
            const homeFilePossibilities = glob_1.default.sync(path_1.default.join(pagesDir, "**", "@(index|Home|home|Homepage).*"));
            // Overwrite App.tsx
            const indexPath = path_1.default.join(projectPath, "src", `App.${jsOrTs}x`);
            const content = homeFilePossibilities.length > 0
                ? (0, file_utils_1.generateHomePage)(homeFilePossibilities[0], indexPath, globalContextsPath)
                : (0, file_utils_1.generateWelcomePage)(config, "react");
            yield fs_1.promises.writeFile(indexPath, content);
        }
        return;
    }),
    build: (args) => __awaiter(void 0, void 0, void 0, function* () {
        const { npmRunCmd, projectPath } = args;
        yield (0, cmd_utils_1.spawnOrFail)(`${npmRunCmd} build`, projectPath);
    }),
};
