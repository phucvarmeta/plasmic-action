"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ifTs = exports.ensureTsconfig = exports.getPlasmicConfig = exports.generateWelcomePage = exports.generateHomePage = exports.updateViteFile = exports.generateRoutingCode = exports.extractRoutes = exports.extractComponentName = exports.overwriteReadme = exports.writePlasmicLoaderJson = exports.stripExtension = exports.deleteGlob = void 0;
const fs_1 = require("fs");
const glob_1 = __importDefault(require("glob"));
const lodash_1 = __importDefault(require("lodash"));
const path = __importStar(require("upath"));
const readme_1 = require("../templates/readme");
const welcomePage_1 = require("../templates/welcomePage");
const lang_utils_1 = require("./lang-utils");
const npm_utils_1 = require("./npm-utils");
/**
 * Runs the search pattern through `glob` and deletes all resulting files
 * @param searchPattern - glob search query
 * @param skipPatterns - array of fragments. Skip any file contains any of the fragments
 */
function deleteGlob(searchPattern, skipPatterns) {
    const filesToDelete = glob_1.default
        .sync(searchPattern)
        .filter((file) => !skipPatterns || !skipPatterns.find((pattern) => file.includes(pattern)));
    filesToDelete.forEach((f) => (0, fs_1.unlinkSync)(f));
}
exports.deleteGlob = deleteGlob;
function stripExtension(filename, removeComposedPath = false) {
    const ext = removeComposedPath
        ? filename.substring(filename.indexOf("."))
        : path.extname(filename);
    if (!ext || filename === ext) {
        return filename;
    }
    return filename.substring(0, filename.lastIndexOf(ext));
}
exports.stripExtension = stripExtension;
function writePlasmicLoaderJson(projectDir, projectId, projectApiToken) {
    return __awaiter(this, void 0, void 0, function* () {
        const plasmicLoaderJson = path.join(projectDir, "plasmic-loader.json");
        const content = {
            projects: [
                {
                    projectId,
                    projectApiToken,
                },
            ],
        };
        yield fs_1.promises.writeFile(plasmicLoaderJson, JSON.stringify(content));
    });
}
exports.writePlasmicLoaderJson = writePlasmicLoaderJson;
/**
 * Overwrite the README file
 * @param projectPath
 * @param platform
 * @param buildCommand
 */
function overwriteReadme(projectPath, platform, buildCommand) {
    return __awaiter(this, void 0, void 0, function* () {
        const readmeFile = path.join(projectPath, "README.md");
        const contents = (0, readme_1.README)(platform, buildCommand);
        yield fs_1.promises.writeFile(readmeFile, contents);
    });
}
exports.overwriteReadme = overwriteReadme;
// Function to extract the component name from renderModuleFilePath
function extractComponentName(renderModuleFilePath) {
    const parts = renderModuleFilePath.split("/");
    const filename = parts[parts.length - 1];
    // Remove the extension and "Plasmic" prefix
    return filename.replace(/\.tsx$/, "").replace(/^Plasmic/, "");
}
exports.extractComponentName = extractComponentName;
// Step 1: Extract routes from plasmic.json
function extractRoutes(projectPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const routes = [];
        const plasmicJsonPath = path.join(projectPath, "plasmic.json");
        // Read the plasmic.json file
        const plasmicJson = JSON.parse(yield fs_1.promises.readFile(plasmicJsonPath, "utf8"));
        // Process all projects in the plasmic.json file
        plasmicJson.projects.forEach((project) => {
            if (project.components) {
                project.components.forEach((component) => {
                    var _a;
                    // Check if the component is a page with a path
                    if (component.componentType === "page" && component.path) {
                        routes.push({
                            path: component.path,
                            componentName: component.name,
                            importPath: extractComponentName(component.renderModuleFilePath),
                            modulePath: ((_a = component.importSpec) === null || _a === void 0 ? void 0 : _a.modulePath) || `${component.name}.tsx`,
                        });
                    }
                });
            }
        });
        return routes;
    });
}
exports.extractRoutes = extractRoutes;
// Step 2: Generate routing code
function generateRoutingCode(projectPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const routes = yield extractRoutes(projectPath);
        // Generate import statements
        const imports = routes
            .map((route) => `import ${route.componentName} from "./components/${route.modulePath}";`)
            .join("\n");
        // Generate route elements
        const routeElements = routes
            .map((route) => `        <Route path="${route.path}" element={<${route.componentName} />} />`)
            .join("\n");
        // Generate the complete App.tsx code
        const appCode = `import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
${imports}

function App() {
  return (
    <Router>
      <Routes>
        <Route
          path="/"
          element={<Navigate to="${routes[0].path}" />}
        />
${routeElements}
        {/* Add more routes here as needed */}
      </Routes>
    </Router>
  );
}

export default App;
`;
        const appPath = path.join(projectPath, "src", "App.tsx");
        yield fs_1.promises.writeFile(appPath, appCode);
    });
}
exports.generateRoutingCode = generateRoutingCode;
function updateViteFile(projectPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const tsConfigAppFile = path.join(projectPath, "tsconfig.app.json");
        const tsConfigNodeFile = path.join(projectPath, "tsconfig.node.json");
        const searchText = '"verbatimModuleSyntax": true';
        const replaceText = '"verbatimModuleSyntax": false';
        const configAppFileContent = yield fs_1.promises.readFile(tsConfigAppFile, "utf8");
        console.log("ðŸš€ ~ updateViteFile ~ configAppFileContent:", configAppFileContent);
        const replacedAppFileContent = configAppFileContent.replace(searchText, replaceText);
        console.log("ðŸš€ ~ updateViteFile ~ replacedAppFileContent:", replacedAppFileContent);
        yield fs_1.promises.writeFile(tsConfigAppFile, replacedAppFileContent);
        const configNodeFileContent = yield fs_1.promises.readFile(tsConfigNodeFile, "utf8");
        console.log("ðŸš€ ~ updateViteFile ~ configNodeFileContent:", configNodeFileContent);
        const replacedNodeFileContent = configNodeFileContent.replace(searchText, replaceText);
        console.log("ðŸš€ ~ updateViteFile ~ replacedNodeFileContent:", replacedNodeFileContent);
        yield fs_1.promises.writeFile(tsConfigNodeFile, configNodeFileContent);
    });
}
exports.updateViteFile = updateViteFile;
/**
 * Generate a file to render the component
 * @param componentAbsPath - absolute path to component to render
 * @param indexAbsPath - absolute path of index file to write
 * @returns
 */
function generateHomePage(
// componentAbsPath: string,
indexAbsPath, projectPath, globalContextsAbsPath) {
    return __awaiter(this, void 0, void 0, function* () {
        // console.log("ðŸš€ ~ componentAbsPath:", componentAbsPath);
        console.log("ðŸš€ ~ projectPath:", projectPath);
        // const componentFilename = path.basename(componentAbsPath);
        // const componentName = stripExtension(componentFilename);
        // The relative import path from App.js to the Plasmic component
        // const componentRelativePath = path.relative(
        //   path.dirname(indexAbsPath),
        //   componentAbsPath
        // );
        const routes = yield extractRoutes(projectPath);
        const globalContextsImport = globalContextsAbsPath
            ? `import GlobalContextsProvider from './${stripExtension(path.relative(path.dirname(indexAbsPath), globalContextsAbsPath))}'`
            : ``;
        const maybeWrapInGlobalContexts = (content) => {
            return globalContextsAbsPath
                ? `<GlobalContextsProvider>${content}</GlobalContextsProvider>`
                : content;
        };
        const routeElements = routes
            .map((route) => `        <Route path="${route.path}" element={<${route.componentName} />} />`)
            .join("\n");
        // Generate import statements
        const imports = routes
            .map((route) => `import ${route.componentName} from "./components/${route.modulePath}";`)
            .join("\n");
        const appjsContents = `
  import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
  ${globalContextsImport}
  ${imports}

function App() {
  return (${maybeWrapInGlobalContexts(`
     <Router>
      <Routes>
        <Route
          path="/"
          element={<Navigate to="${routes[0].path}" />}
        />
${routeElements}
        {/* Add more routes here as needed */}
      </Routes>
    </Router>
  `)});
}

export default App;
  `;
        return appjsContents;
    });
}
exports.generateHomePage = generateHomePage;
/**
 * Generate a Welcome page based on a PlasmicConfig
 * @param config - PlasmicConfig
 * @param noPages - don't render links to pages
 * @returns
 */
function generateWelcomePage(config, platform) {
    var _a, _b, _c, _d;
    let pages;
    if (platform !== "react" && config && lodash_1.default.isArray(config.projects)) {
        const components = lodash_1.default.flatMap(config.projects, (p) => p.components).filter((c) => c.componentType === "page");
        const dir = (_b = (_a = config === null || config === void 0 ? void 0 : config.nextjsConfig) === null || _a === void 0 ? void 0 : _a.pagesDir) !== null && _b !== void 0 ? _b : (_c = config === null || config === void 0 ? void 0 : config.gatsbyConfig) === null || _c === void 0 ? void 0 : _c.pagesDir;
        if (components.length > 0 && dir) {
            pages = {
                components,
                dir,
                getPageSection: () => {
                    const pageLinks = components
                        .map((pc) => {
                        // Get the relative path on the filesystem
                        const relativePath = path.relative(dir, pc.importSpec.modulePath);
                        // Format as an absolute path without the extension name
                        const relativeLink = "/" + stripExtension(relativePath);
                        if (platform === "nextjs") {
                            return `<li><Link href="${relativeLink}">${pc.name} - ${relativeLink}</Link></li>`;
                        }
                        else {
                            return `<li><a style={{ color: "blue" }} href="${relativeLink}">${pc.name} - ${relativeLink}</a></li>`;
                        }
                    })
                        .join("\n");
                    return `
          <h3>Your pages:</h3>
          <ul>
            ${pageLinks}
          </ul>
    `;
                },
            };
        }
    }
    const content = (0, welcomePage_1.WELCOME_PAGE)(!!pages, platform, (_d = pages === null || pages === void 0 ? void 0 : pages.getPageSection()) !== null && _d !== void 0 ? _d : "");
    return content;
}
exports.generateWelcomePage = generateWelcomePage;
function getPlasmicConfig(projectPath, platform, scheme) {
    return __awaiter(this, void 0, void 0, function* () {
        const isNextjs = platform === "nextjs";
        const isGatsby = platform === "gatsby";
        const isLoader = scheme === "loader";
        const isCodegen = scheme === "codegen";
        const configPath = (0, lang_utils_1.ensure)(isCodegen
            ? "plasmic.json"
            : isNextjs && isLoader
                ? ".plasmic/plasmic.json"
                : isGatsby && isLoader
                    ? ".cache/.plasmic/plasmic.json"
                    : undefined);
        const configStr = yield fs_1.promises.readFile(path.join(projectPath, configPath));
        return JSON.parse(configStr.toString());
    });
}
exports.getPlasmicConfig = getPlasmicConfig;
// Create tsconfig.json if it doesn't exist
// this will force Plasmic to recognize Typescript
function ensureTsconfig(projectPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const tsconfigPath = path.join(projectPath, "tsconfig.json");
        if (!(0, fs_1.existsSync)(tsconfigPath)) {
            yield fs_1.promises.writeFile(tsconfigPath, "");
            const installTsResult = yield (0, npm_utils_1.installUpgrade)("typescript @types/react", {
                workingDir: projectPath,
            });
            if (!installTsResult) {
                throw new Error("Failed to install Typescript");
            }
        }
    });
}
exports.ensureTsconfig = ensureTsconfig;
function ifTs(ts, str) {
    return ts === "ts" ? str : "";
}
exports.ifTs = ifTs;
