"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensure = exports.withoutNils = exports.omitNils = exports.assertEq = exports.assert = void 0;
const L = __importStar(require("lodash"));
function assert(cond, msg = "Assertion failed") {
    if (!cond) {
        msg = L.isString(msg) ? msg : msg();
        debugger;
        throw new Error(msg);
    }
}
exports.assert = assert;
function assertEq(a, b, msg = "Assertion failed") {
    if (a !== b) {
        console.log(a, b);
        msg = L.isString(msg) ? msg : msg();
        debugger;
        throw new Error(msg);
    }
}
exports.assertEq = assertEq;
exports.omitNils = (x) => L.pickBy(x, (x) => x != null);
exports.withoutNils = (xs) => xs.filter((x) => x != null);
function ensure(x) {
    if (x === null || x === undefined) {
        throw new Error(`Value must not be undefined or null.`);
    }
    else {
        return x;
    }
}
exports.ensure = ensure;
