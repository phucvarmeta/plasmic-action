"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.projectToken = exports.getProjectApiToken = void 0;
const chalk_1 = __importDefault(require("chalk"));
const api_1 = require("../api");
const deps_1 = require("../deps");
const auth_utils_1 = require("../utils/auth-utils");
const config_utils_1 = require("../utils/config-utils");
exports.getProjectApiToken = (projectId, host) => __awaiter(void 0, void 0, void 0, function* () {
    var _a;
    const auth = yield auth_utils_1.getOrStartAuth({
        host: host || config_utils_1.DEFAULT_HOST,
        baseDir: "",
    });
    if (auth) {
        const api = new api_1.PlasmicApi(auth);
        const versionResolution = yield api.resolveSync([
            { projectId, componentIdOrNames: undefined },
        ]);
        return (_a = versionResolution.projects[0]) === null || _a === void 0 ? void 0 : _a.projectApiToken;
    }
    return undefined;
});
exports.projectToken = (args) => __awaiter(void 0, void 0, void 0, function* () {
    const { projectId, host } = args;
    const projectApiToken = yield exports.getProjectApiToken(projectId, host);
    deps_1.logger.info(`Generated projectApiToken for ${chalk_1.default.bold(projectId)}:`);
    deps_1.logger.info(chalk_1.default.bold(projectApiToken));
    deps_1.logger.warn(`Be careful with this token, anyone can have access to your project with it`);
});
