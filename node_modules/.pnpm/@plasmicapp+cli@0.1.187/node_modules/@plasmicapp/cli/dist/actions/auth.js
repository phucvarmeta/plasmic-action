"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.auth = exports.checkCredentials = void 0;
const deps_1 = require("../deps");
const auth_utils_1 = require("../utils/auth-utils");
const error_1 = require("../utils/error");
function checkCredentials() {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield auth_utils_1.getCurrentAuth()) {
            deps_1.logger.info("Plasmic credentials are ok.");
            return;
        }
        throw new error_1.HandledError("The authentication credentials are missing or invalid.");
    });
}
exports.checkCredentials = checkCredentials;
function getEmail() {
    return __awaiter(this, void 0, void 0, function* () {
        const authCreds = yield auth_utils_1.getCurrentAuth();
        if (authCreds) {
            deps_1.logger.info(authCreds.user);
            return authCreds.user;
        }
        throw new error_1.HandledError("The authentication credentials are missing or invalid.");
    });
}
function auth(args) {
    return __awaiter(this, void 0, void 0, function* () {
        if (args.check) {
            return checkCredentials();
        }
        if (args.email) {
            return getEmail();
        }
        return auth_utils_1.startAuth(args);
    });
}
exports.auth = auth;
