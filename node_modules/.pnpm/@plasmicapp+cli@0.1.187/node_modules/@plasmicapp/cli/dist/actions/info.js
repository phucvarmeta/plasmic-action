"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.printProjectInfo = void 0;
const deps_1 = require("../deps");
const get_context_1 = require("../utils/get-context");
function printProjectInfo(opts) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        let context = yield get_context_1.getContext(opts);
        const results = yield Promise.all(opts.projects.map((p) => __awaiter(this, void 0, void 0, function* () { return yield context.api.projectMeta(p); })));
        for (const meta of results) {
            deps_1.logger.info(`Id: ${meta.id}`);
            deps_1.logger.info(`Name: ${meta.name}`);
            deps_1.logger.info(`Host URL: ${(_a = meta.hostUrl) !== null && _a !== void 0 ? _a : null}`);
            deps_1.logger.info(`Last published version: ${(_b = meta.lastPublishedVersion) !== null && _b !== void 0 ? _b : null}`);
        }
    });
}
exports.printProjectInfo = printProjectInfo;
