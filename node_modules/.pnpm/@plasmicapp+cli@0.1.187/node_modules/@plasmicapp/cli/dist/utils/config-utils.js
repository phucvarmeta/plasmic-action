"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPageAwarePlatform = exports.getOrAddProjectLock = exports.getOrAddProjectConfig = exports.updateConfig = exports.writeLock = exports.writeConfig = exports.readConfig = exports.fillDefaults = exports.findConfigFile = exports.DEFAULT_PUBLIC_FILES_CONFIG = exports.DEFAULT_CONFIG = exports.createProjectConfig = exports.ENV_AUTH_TOKEN = exports.ENV_AUTH_USER = exports.ENV_AUTH_HOST = exports.CONFIG_SCHEMA_FILE_NAME = exports.LOADER_CONFIG_FILE_NAME = exports.LOCK_FILE_NAME = exports.CONFIG_FILE_NAME = exports.AUTH_FILE_NAME = exports.DEFAULT_HOST = void 0;
const lodash_1 = __importDefault(require("lodash"));
const deps_1 = require("../deps");
const error_1 = require("../utils/error");
const code_utils_1 = require("./code-utils");
const file_utils_1 = require("./file-utils");
exports.DEFAULT_HOST = process.env.PLASMIC_DEFAULT_HOST || "https://studio.plasmic.app";
// Default filenames
exports.AUTH_FILE_NAME = ".plasmic.auth";
exports.CONFIG_FILE_NAME = "plasmic.json";
exports.LOCK_FILE_NAME = "plasmic.lock";
exports.LOADER_CONFIG_FILE_NAME = "plasmic-loader.json";
exports.CONFIG_SCHEMA_FILE_NAME = "plasmic.schema.json";
// Default environment variable names
exports.ENV_AUTH_HOST = "PLASMIC_AUTH_HOST";
exports.ENV_AUTH_USER = "PLASMIC_AUTH_USER";
exports.ENV_AUTH_TOKEN = "PLASMIC_AUTH_TOKEN";
function createProjectConfig(base) {
    return {
        projectId: base.projectId,
        projectApiToken: base.projectApiToken,
        projectName: base.projectName,
        version: base.version,
        cssFilePath: base.cssFilePath,
        components: [],
        icons: [],
        images: [],
        indirect: base.indirect,
        globalContextsFilePath: "",
    };
}
exports.createProjectConfig = createProjectConfig;
exports.DEFAULT_CONFIG = {
    platform: "react",
    code: {
        lang: "ts",
        scheme: "blackbox",
        reactRuntime: "classic",
    },
    style: {
        scheme: "css-modules",
        // We set it to empty to compile. In reality, it will be provided the by
        // the server.
        defaultStyleCssFilePath: "",
    },
    images: {
        scheme: "inlined",
    },
    tokens: {
        scheme: "theo",
        tokensFilePath: "plasmic-tokens.theo.json",
    },
    srcDir: "./src/components",
    defaultPlasmicDir: "./plasmic",
    projects: [],
    globalVariants: {
        variantGroups: [],
    },
    wrapPagesWithGlobalContexts: true,
};
exports.DEFAULT_PUBLIC_FILES_CONFIG = {
    scheme: "public-files",
    publicDir: "../public",
    publicUrlPrefix: "/static/",
};
/**
 * Finds the full path to the plasmic.json file in `dir`.  If
 * `opts.traverseParents` is set to true, then will also look in ancestor
 * directories until the plasmic.json file is found.  If none is found,
 * returns undefined.
 */
function findConfigFile(dir, opts) {
    return file_utils_1.findFile(dir, (f) => f === exports.CONFIG_FILE_NAME, opts);
}
exports.findConfigFile = findConfigFile;
/**
 * Given some partial configs for PlasmicConfig, fills in all required fields
 * with default values.
 */
function fillDefaults(config) {
    return lodash_1.default.merge({}, exports.DEFAULT_CONFIG, config);
}
exports.fillDefaults = fillDefaults;
function readConfig(configFile, autoFillDefaults) {
    if (!file_utils_1.existsBuffered(configFile)) {
        const err = new error_1.HandledError(`No Plasmic config file found at ${configFile}`);
        throw err;
    }
    try {
        const result = JSON.parse(file_utils_1.readFileText(configFile));
        return autoFillDefaults ? fillDefaults(result) : result;
    }
    catch (e) {
        deps_1.logger.error(`Error encountered reading ${exports.CONFIG_FILE_NAME} at ${configFile}: ${e}`);
        throw e;
    }
}
exports.readConfig = readConfig;
function writeConfig(configFile, config, baseDir) {
    return __awaiter(this, void 0, void 0, function* () {
        yield file_utils_1.writeFileContentRaw(configFile, code_utils_1.formatAsLocal(JSON.stringify(Object.assign(Object.assign({}, config), { $schema: `https://unpkg.com/@plasmicapp/cli@${config.cliVersion}/dist/plasmic.schema.json` }), undefined, 2), configFile, baseDir), {
            force: true,
        });
    });
}
exports.writeConfig = writeConfig;
function writeLock(lockFile, lock, baseDir) {
    return __awaiter(this, void 0, void 0, function* () {
        yield file_utils_1.writeFileContentRaw(lockFile, code_utils_1.formatAsLocal(JSON.stringify(lock, undefined, 2), "/tmp/x.json", baseDir), {
            force: true,
        });
    });
}
exports.writeLock = writeLock;
function updateConfig(context, newConfig, baseDir) {
    return __awaiter(this, void 0, void 0, function* () {
        // plasmic.json
        yield writeConfig(context.configFile, newConfig, baseDir);
        context.config = newConfig;
        // plasmic.lock
        yield writeLock(context.lockFile, context.lock, baseDir);
    });
}
exports.updateConfig = updateConfig;
function getOrAddProjectConfig(context, projectId, base // if one doesn't exist, start with this
) {
    let project = context.config.projects.find((p) => p.projectId === projectId);
    if (!project) {
        project = !!base
            ? lodash_1.default.cloneDeep(base)
            : {
                projectId,
                projectName: "",
                version: "latest",
                cssFilePath: "",
                components: [],
                icons: [],
                images: [],
                jsBundleThemes: [],
                indirect: false,
                globalContextsFilePath: "",
            };
        context.config.projects.push(project);
    }
    return project;
}
exports.getOrAddProjectConfig = getOrAddProjectConfig;
function getOrAddProjectLock(context, projectId, base // if one doesn't exist, start with this
) {
    let project = context.lock.projects.find((p) => p.projectId === projectId);
    if (!project) {
        project = !!base
            ? lodash_1.default.cloneDeep(base)
            : {
                projectId,
                version: "",
                dependencies: {},
                lang: context.config.code.lang,
                fileLocks: [],
            };
        context.lock.projects.push(project);
    }
    return project;
}
exports.getOrAddProjectLock = getOrAddProjectLock;
function isPageAwarePlatform(platform) {
    return platform === "nextjs" || platform === "gatsby";
}
exports.isPageAwarePlatform = isPageAwarePlatform;
