"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.confirmWithUser = void 0;
const inquirer_1 = __importDefault(require("inquirer"));
const deps_1 = require("../deps");
/**
 * Provide a standardized way to ask user to continue
 * @param message
 * @param yes - If true, always return true without prompting.
 * @param default - Override the default value returned if the user presses enter
 */
function confirmWithUser(message, yes, defaultAnswer) {
    return __awaiter(this, void 0, void 0, function* () {
        if (process.env.QUIET) {
            return true;
        }
        if (!!yes) {
            if (!process.env.QUIET) {
                deps_1.logger.info(`${message} (Y/n): y`);
            }
            return true;
        }
        defaultAnswer = defaultAnswer !== null && defaultAnswer !== void 0 ? defaultAnswer : "y";
        const isDefaultYes = defaultAnswer === "y";
        const choices = `(${isDefaultYes ? "Y" : "y"}/${isDefaultYes ? "n" : "N"})`;
        const res = yield inquirer_1.default.prompt([
            {
                name: "continue",
                message: `${message} ${choices}`,
                default: defaultAnswer,
            },
        ]);
        return ["y", "yes"].includes(res.continue.toLowerCase());
    });
}
exports.confirmWithUser = confirmWithUser;
