"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const sync_1 = require("../actions/sync");
const fixtures_1 = require("../test-common/fixtures");
jest.mock("../api");
// Reset the test project directory
beforeEach(() => {
    fixtures_1.standardTestSetup();
});
afterEach(() => {
    // Remove the temporary directory
    // TODO: Comment out to keep files for debugging
    fixtures_1.standardTestTeardown();
});
describe("versioned-sync", () => {
    test("syncs non-recursive case", () => __awaiter(void 0, void 0, void 0, function* () {
        fixtures_1.opts.projects = ["projectId1"];
        fixtures_1.opts.nonRecursive = true;
        yield expect(sync_1.sync(fixtures_1.opts)).resolves.toBeUndefined();
        fixtures_1.expectProject1Components();
        expect(fixtures_1.tmpRepo.checkFile("./src/DepComponent.tsx")).toBeFalsy();
        // Check plasmic.json
        fixtures_1.expectProject1PlasmicJson();
    }));
    test("syncs missing components", () => __awaiter(void 0, void 0, void 0, function* () {
        fixtures_1.opts.projects = ["projectId1"];
        fixtures_1.opts.nonRecursive = true;
        // Simulates user deleting files by accident, since the project exists in plasmic.json,
        // but not in the project directory
        const plasmicJson = fixtures_1.tmpRepo.readPlasmicJson();
        plasmicJson.projects.push(fixtures_1.project1Config);
        fixtures_1.tmpRepo.writePlasmicJson(plasmicJson);
        yield expect(sync_1.sync(fixtures_1.opts)).resolves.toBeUndefined();
    }));
    test("syncs down new names", () => __awaiter(void 0, void 0, void 0, function* () {
        fixtures_1.opts.projects = ["projectId1"];
        yield expect(sync_1.sync(fixtures_1.opts)).resolves.toBeUndefined();
        // Change component name server-side
        const mockProject = fixtures_1.mockApi.getMockProject("projectId1", "1.2.3");
        const buttonData = mockProject.components.find((c) => c.id === "buttonId");
        buttonData.name = "NewButton";
        mockProject.version = "2.0.0";
        fixtures_1.mockApi.addMockProject(mockProject);
        // Try syncing again and see if things show up
        yield expect(sync_1.sync(fixtures_1.opts)).resolves.toBeUndefined();
        const plasmicJson = fixtures_1.tmpRepo.readPlasmicJson();
        const projectInConfig = plasmicJson.projects.find((p) => p.projectId === "projectId1");
        const componentInConfig = !!projectInConfig
            ? projectInConfig.components.find((c) => c.id === buttonData.id)
            : undefined;
        expect(componentInConfig).toBeTruthy();
        expect(componentInConfig === null || componentInConfig === void 0 ? void 0 : componentInConfig.name).toEqual(buttonData.name);
    }));
    test("syncs latest", () => __awaiter(void 0, void 0, void 0, function* () {
        fixtures_1.opts.projects = ["projectId1"];
        yield expect(sync_1.sync(fixtures_1.opts)).resolves.toBeUndefined();
        // Change component version server-side
        const mockProject = fixtures_1.mockApi.getMockProject("projectId1", "1.2.3");
        mockProject.version = "1.3.4";
        fixtures_1.mockApi.addMockProject(mockProject);
        // Try syncing again and see if things show up
        yield expect(sync_1.sync(fixtures_1.opts)).resolves.toBeUndefined();
        const button = fixtures_1.mockApi.stringToMockComponent(fixtures_1.tmpRepo.getComponentFileContents("projectId1", "buttonId"));
        expect(button).toBeTruthy();
        expect(button === null || button === void 0 ? void 0 : button.name).toEqual("Button");
        expect(button === null || button === void 0 ? void 0 : button.version).toEqual("1.3.4");
    }));
    test("syncs exact version", () => __awaiter(void 0, void 0, void 0, function* () {
        fixtures_1.opts.projects = ["projectId1"];
        fixtures_1.opts.nonRecursive = true;
        yield expect(sync_1.sync(fixtures_1.opts)).resolves.toBeUndefined();
        // Change component version server-side
        const mockProject = fixtures_1.mockApi.getMockProject("projectId1", "1.2.3");
        mockProject.version = "2.0.0";
        fixtures_1.mockApi.addMockProject(mockProject);
        // Read in updated plasmic.json post-sync
        const plasmicJson = fixtures_1.tmpRepo.readPlasmicJson();
        expect(plasmicJson.projects.length).toEqual(1); // projectId1
        expect(plasmicJson.projects[0].components.length).toEqual(2); // Container+Button
        // Try syncing non-existent version
        plasmicJson.projects[0].version = "1.2.10"; // Doesn't exist
        fixtures_1.tmpRepo.writePlasmicJson(plasmicJson);
        yield expect(sync_1.sync(fixtures_1.opts)).rejects.toThrow();
        // Try syncing existing version
        plasmicJson.projects[0].version = "2.0.0"; // Doesn't exist
        fixtures_1.tmpRepo.writePlasmicJson(plasmicJson);
        yield expect(sync_1.sync(fixtures_1.opts)).resolves.toBeUndefined();
        const button = fixtures_1.mockApi.stringToMockComponent(fixtures_1.tmpRepo.getComponentFileContents("projectId1", "buttonId"));
        expect(button).toBeTruthy();
        expect(button === null || button === void 0 ? void 0 : button.name).toEqual("Button");
        expect(button === null || button === void 0 ? void 0 : button.version).toEqual("2.0.0");
    }));
    test("syncs according to semver", () => __awaiter(void 0, void 0, void 0, function* () {
        fixtures_1.opts.projects = ["projectId1"];
        fixtures_1.opts.nonRecursive = true;
        yield expect(sync_1.sync(fixtures_1.opts)).resolves.toBeUndefined();
        // Change component version server-side
        const mockProject = fixtures_1.mockApi.getMockProject("projectId1", "1.2.3");
        mockProject.version = "1.10.1";
        fixtures_1.mockApi.addMockProject(mockProject);
        // Update plasmic.json to use semver
        const plasmicJson = fixtures_1.tmpRepo.readPlasmicJson();
        expect(plasmicJson.projects.length).toEqual(1);
        expect(plasmicJson.projects[0].components.length).toEqual(2);
        plasmicJson.projects[0].version = "^1.2.3";
        // Try syncing again and see if things show up
        yield expect(sync_1.sync(fixtures_1.opts)).resolves.toBeUndefined();
        const button = fixtures_1.mockApi.stringToMockComponent(fixtures_1.tmpRepo.getComponentFileContents("projectId1", "buttonId"));
        expect(button).toBeTruthy();
        expect(button === null || button === void 0 ? void 0 : button.name).toEqual("Button");
        expect(button === null || button === void 0 ? void 0 : button.version).toEqual("1.10.1");
    }));
});
describe("recursive-sync", () => {
    test("non-recursive base case", () => __awaiter(void 0, void 0, void 0, function* () {
        // Should sync both Button+Container because of the dependency
        fixtures_1.opts.projects = ["projectId1"];
        fixtures_1.opts.nonRecursive = true;
        yield expect(sync_1.sync(fixtures_1.opts)).resolves.toBeUndefined();
        fixtures_1.expectProject1Components();
        expect(fixtures_1.tmpRepo.checkFile("./src/DepComponent.tsx")).toBeFalsy();
        fixtures_1.expectProject1PlasmicJson();
    }));
    test("dependencies base case", () => __awaiter(void 0, void 0, void 0, function* () {
        fixtures_1.opts.projects = ["projectId1"];
        yield expect(sync_1.sync(fixtures_1.opts)).resolves.toBeUndefined();
        expect(fixtures_1.tmpRepo.checkFile("./src/Button.tsx")).toBeTruthy();
        expect(fixtures_1.tmpRepo.checkFile("./src/Container.tsx")).toBeTruthy();
        const depComponent = fixtures_1.mockApi.stringToMockComponent(fixtures_1.tmpRepo.getComponentFileContents("dependencyId1", "depComponentId"));
        expect(depComponent).toBeTruthy();
        expect(depComponent === null || depComponent === void 0 ? void 0 : depComponent.name).toEqual("DepComponent");
        expect(depComponent === null || depComponent === void 0 ? void 0 : depComponent.version).toEqual("2.3.4");
        // Check plasmic.json
        fixtures_1.expectProjectAndDepPlasmicJson();
    }));
});
