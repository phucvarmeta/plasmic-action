"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("../api");
const sync_1 = require("../actions/sync");
const fixtures_1 = require("../test-common/fixtures");
// Reset the test project directory
beforeEach(() => {
    fixtures_1.standardTestSetup(false);
});
afterEach(() => {
    fixtures_1.standardTestTeardown();
});
describe("first-time-user-experience", () => {
    test("missing auth", () => __awaiter(void 0, void 0, void 0, function* () {
        // Trying to sync is going to fail without a valid auth file
        fixtures_1.tmpRepo.deletePlasmicAuth();
        yield expect(sync_1.sync(fixtures_1.opts)).rejects.toThrow();
    }));
    test("no args", () => __awaiter(void 0, void 0, void 0, function* () {
        // No projects or components specified
        yield expect(sync_1.sync(fixtures_1.opts)).rejects.toThrow();
    }));
    test("specify project", () => __awaiter(void 0, void 0, void 0, function* () {
        fixtures_1.opts.projects = ["projectId1"];
        yield expect(sync_1.sync(fixtures_1.opts)).resolves.toBeUndefined();
        fixtures_1.expectProject1Components();
        expect(fixtures_1.tmpRepo.checkFile("./src/DepComponent.tsx")).toBeFalsy();
        fixtures_1.expectProject1PlasmicJson();
    }));
});
