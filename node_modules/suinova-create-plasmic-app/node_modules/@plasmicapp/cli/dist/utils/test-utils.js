"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TempRepo = void 0;
const fs_1 = __importDefault(require("fs"));
const path = __importStar(require("path"));
const tmp = __importStar(require("tmp"));
const config_utils_1 = require("../utils/config-utils");
const file_utils_1 = require("./file-utils");
class TempRepo {
    constructor() {
        this.tmpDir = tmp.dirSync({ unsafeCleanup: true });
    }
    destroy() {
        this.tmpDir.removeCallback();
    }
    resolveFile(relativePath) {
        return path.resolve(this.tmpDir.name, relativePath);
    }
    readFile(relativePath) {
        const absPath = this.resolveFile(relativePath);
        const buf = file_utils_1.readFileText(absPath);
        return buf.toString();
    }
    writeFile(relativePath, data) {
        const absPath = this.resolveFile(relativePath);
        file_utils_1.writeFileText(absPath, data);
    }
    deleteFile(relativePath) {
        const absPath = this.resolveFile(relativePath);
        file_utils_1.deleteFileBuffered(absPath);
    }
    checkFile(relativePath) {
        const absPath = this.resolveFile(relativePath);
        try {
            const stats = fs_1.default.statSync(absPath);
            return !!stats ? true : false;
        }
        catch (e) {
            return false;
        }
    }
    getComponentFileContents(projectId, componentId) {
        const plasmicJson = JSON.parse(this.readFile(config_utils_1.CONFIG_FILE_NAME));
        const srcDir = plasmicJson.srcDir;
        const projectConfig = plasmicJson.projects.find((p) => p.projectId === projectId);
        if (!projectConfig) {
            return;
        }
        const componentConfig = projectConfig.components.find((c) => c.id === componentId);
        if (!componentConfig) {
            return;
        }
        const data = this.readFile(path.join(srcDir, componentConfig.renderModuleFilePath));
        return data;
    }
    plasmicAuthPath() {
        return this.resolveFile(config_utils_1.AUTH_FILE_NAME);
    }
    writePlasmicAuth(json) {
        this.writeFile(config_utils_1.AUTH_FILE_NAME, JSON.stringify(json));
    }
    deletePlasmicAuth() {
        this.deleteFile(config_utils_1.AUTH_FILE_NAME);
    }
    plasmicJsonPath() {
        return this.resolveFile(config_utils_1.CONFIG_FILE_NAME);
    }
    readPlasmicJson() {
        return JSON.parse(this.readFile(config_utils_1.CONFIG_FILE_NAME));
    }
    writePlasmicJson(json) {
        this.writeFile(config_utils_1.CONFIG_FILE_NAME, JSON.stringify(json));
    }
    deletePlasmicJson() {
        this.deleteFile(config_utils_1.CONFIG_FILE_NAME);
    }
    plasmicLoaderJsonPath() {
        return this.resolveFile(config_utils_1.LOADER_CONFIG_FILE_NAME);
    }
    readPlasmicLoaderJson() {
        return JSON.parse(this.readFile(config_utils_1.LOADER_CONFIG_FILE_NAME));
    }
}
exports.TempRepo = TempRepo;
