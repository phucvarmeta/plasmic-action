"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.expectProjectAndDepPlasmicJson = exports.expectProject1PlasmicJson = exports.project1Config = exports.expectProject1Components = exports.standardTestTeardown = exports.standardTestSetup = exports.defaultPlasmicJson = exports.tmpRepo = exports.opts = exports.mockApi = void 0;
const lodash_1 = __importDefault(require("lodash"));
const test_utils_1 = require("../utils/test-utils");
jest.mock("../api");
exports.mockApi = require("../api");
exports.defaultPlasmicJson = {
    platform: "react",
    code: {
        lang: "ts",
        scheme: "blackbox",
        reactRuntime: "classic",
    },
    style: {
        scheme: "css",
        defaultStyleCssFilePath: "plasmic/PP__plasmic__default_style.css",
    },
    images: {
        scheme: "inlined",
    },
    tokens: {
        scheme: "theo",
        tokensFilePath: "plasmic-tokens.theo.json",
    },
    srcDir: "src/",
    defaultPlasmicDir: "./plasmic",
    projects: [],
    globalVariants: {
        variantGroups: [],
    },
    wrapPagesWithGlobalContexts: true,
    cliVersion: "0.1.44",
};
function standardTestSetup(includeDep = true) {
    process.env.PLASMIC_DISABLE_AUTH_SEARCH = "1";
    // Setup server-side mock data
    const project1 = {
        projectId: "projectId1",
        projectApiToken: "abc",
        version: "1.2.3",
        projectName: "project1",
        components: [
            {
                id: "buttonId",
                name: "Button",
            },
            {
                id: "containerId",
                name: "Container",
            },
        ],
        dependencies: includeDep
            ? {
                dependencyId1: "2.3.4",
            }
            : {},
    };
    const dependency = {
        projectId: "dependencyId1",
        projectApiToken: "def",
        version: "2.3.4",
        projectName: "dependency1",
        components: [
            {
                id: "depComponentId",
                name: "DepComponent",
            },
        ],
        dependencies: {},
    };
    [project1, dependency].forEach((p) => exports.mockApi.addMockProject(p));
    // Setup client-side directory
    exports.tmpRepo = new test_utils_1.TempRepo();
    exports.tmpRepo.writePlasmicAuth({
        host: "http://localhost:3003",
        user: "yang@plasmic.app",
        token: "faketoken",
    });
    exports.tmpRepo.writePlasmicJson(exports.defaultPlasmicJson);
    // Default opts and config
    exports.opts = {
        projects: [],
        yes: true,
        force: true,
        nonRecursive: false,
        skipUpgradeCheck: true,
        forceOverwrite: true,
        newComponentScheme: "blackbox",
        appendJsxOnMissingBase: false,
        config: exports.tmpRepo.plasmicJsonPath(),
        auth: exports.tmpRepo.plasmicAuthPath(),
        loaderConfig: exports.tmpRepo.plasmicLoaderJsonPath(),
        baseDir: process.cwd(),
    };
}
exports.standardTestSetup = standardTestSetup;
function standardTestTeardown() {
    exports.tmpRepo.destroy();
    exports.mockApi.clear();
    delete process.env["PLASMIC_DISABLE_AUTH_SEARCH"];
}
exports.standardTestTeardown = standardTestTeardown;
function expectProject1Components() {
    // Check correct files exist
    const button = exports.mockApi.stringToMockComponent(exports.tmpRepo.getComponentFileContents("projectId1", "buttonId"));
    const container = exports.mockApi.stringToMockComponent(exports.tmpRepo.getComponentFileContents("projectId1", "containerId"));
    expect(button).toBeTruthy();
    expect(container).toBeTruthy();
    expect(button === null || button === void 0 ? void 0 : button.name).toEqual("Button");
    expect(button === null || button === void 0 ? void 0 : button.version).toEqual("1.2.3");
    expect(container === null || container === void 0 ? void 0 : container.name).toEqual("Container");
    expect(container === null || container === void 0 ? void 0 : container.version).toEqual("1.2.3");
}
exports.expectProject1Components = expectProject1Components;
exports.project1Config = {
    projectId: "projectId1",
    projectName: "Project 1",
    version: "latest",
    cssFilePath: "plasmic/PP__demo.css",
    components: [
        {
            id: "buttonId",
            name: "Button",
            type: "managed",
            projectId: "projectId1",
            renderModuleFilePath: "plasmic/project_id_1/PlasmicButton.tsx",
            importSpec: {
                modulePath: "Button.tsx",
            },
            cssFilePath: "plasmic/PlasmicButton.css",
            scheme: "blackbox",
            componentType: "component",
        },
    ],
    icons: [],
    images: [],
    jsBundleThemes: [],
    indirect: false,
    globalContextsFilePath: "",
};
function expectProject1PlasmicJson(optional) {
    const plasmicJson = exports.tmpRepo.readPlasmicJson();
    expect(plasmicJson.projects.length).toEqual(1);
    const projectConfig = plasmicJson.projects[0];
    if (!(optional === null || optional === void 0 ? void 0 : optional.projectApiToken)) {
        expect(projectConfig.projectApiToken).toBe("abc");
    }
    expect(projectConfig.components.length).toEqual(2);
    const componentNames = projectConfig.components.map((c) => c.name);
    expect(componentNames).toContain("Button");
    expect(componentNames).toContain("Container");
}
exports.expectProject1PlasmicJson = expectProject1PlasmicJson;
function expectProjectAndDepPlasmicJson() {
    const plasmicJson = exports.tmpRepo.readPlasmicJson();
    expect(plasmicJson.projects.length).toEqual(2);
    const projectConfigMap = lodash_1.default.keyBy(plasmicJson.projects, (p) => p.projectId);
    expect(projectConfigMap["projectId1"]).toBeTruthy();
    expect(projectConfigMap["dependencyId1"]).toBeTruthy();
    const projectComponentNames = projectConfigMap["projectId1"].components.map((c) => c.name);
    const depComponentNames = projectConfigMap["dependencyId1"].components.map((c) => c.name);
    expect(projectComponentNames).toContain("Button");
    expect(projectComponentNames).toContain("Container");
    expect(depComponentNames).toContain("DepComponent");
}
exports.expectProjectAndDepPlasmicJson = expectProjectAndDepPlasmicJson;
