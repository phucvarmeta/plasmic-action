"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.watchProjects = void 0;
const lodash_1 = __importDefault(require("lodash"));
const moment_1 = __importDefault(require("moment"));
const deps_1 = require("../deps");
const error_1 = require("../utils/error");
const get_context_1 = require("../utils/get-context");
const semver = __importStar(require("../utils/semver"));
const sync_1 = require("./sync");
function watchProjects(opts, metadataDefaults, onProjectUpdate) {
    return __awaiter(this, void 0, void 0, function* () {
        // Perform a sync before watch.
        const syncOpts = Object.assign(Object.assign({}, opts), { quiet: true });
        const syncMetadata = Object.assign(Object.assign({}, metadataDefaults), { command: "watch" });
        yield sync_1.sync(syncOpts, syncMetadata);
        const context = yield get_context_1.getContext(opts);
        const config = context.config;
        const socket = context.api.connectSocket();
        const projectIds = lodash_1.default.uniq(opts.projects.length > 0
            ? opts.projects
            : config.projects.map((c) => c.projectId));
        // Filter out projects that are not latest
        const latestProjects = projectIds.filter((projectId) => {
            const projectConfig = config.projects.find((p) => p.projectId === projectId);
            return !projectConfig || semver.isLatest(projectConfig.version);
        });
        if (projectIds.length !== latestProjects.length) {
            const filteredProjects = lodash_1.default.difference(projectIds, latestProjects);
            deps_1.logger.warn(`Warning: watch only works for projects with version="latest". Ignoring ${filteredProjects}`);
        }
        if (latestProjects.length === 0) {
            throw new error_1.HandledError("Don't know which projects to sync; please specify via --projects");
        }
        const promise = new Promise((resolve, reject) => {
            socket.on("initServerInfo", () => {
                // upon connection, subscribe to changes for argument projects
                socket.emit("subscribe", {
                    namespace: "projects",
                    projectIds: latestProjects,
                });
            });
            socket.on("error", (data) => {
                reject(new error_1.HandledError(data));
            });
            socket.on("update", asyncOneAtATime((data) => __awaiter(this, void 0, void 0, function* () {
                // Just run syncProjects() for now when any project has been updated
                // Note on the 'updated to revision' part: this is parsed by the
                // loader package to know that we finished updating the components.
                yield sync_1.sync(syncOpts, syncMetadata);
                deps_1.logger.info(`[${moment_1.default().format("HH:mm:ss")}] Project ${data.projectId} updated to revision ${data.revisionNum}`);
                onProjectUpdate === null || onProjectUpdate === void 0 ? void 0 : onProjectUpdate();
            }), true));
        });
        deps_1.logger.info(`Watching projects ${latestProjects} ...`);
        return promise;
    });
}
exports.watchProjects = watchProjects;
function asyncOneAtATime(f, bounceValue) {
    let waitingCall = undefined, currentPromise = undefined;
    function invoke({ args, resolve, reject }) {
        const onCompletion = () => {
            currentPromise = undefined;
            if (waitingCall) {
                invoke(waitingCall);
                waitingCall = undefined;
            }
        };
        currentPromise = f(...args);
        currentPromise.then(onCompletion, onCompletion);
        currentPromise.then(resolve, reject);
    }
    return (...args) => {
        return new Promise((resolve, reject) => {
            if (!currentPromise) {
                // Free to proceed.
                invoke({ args, resolve, reject });
            }
            else {
                // Evict current waiter, and enqueue self.
                if (waitingCall) {
                    waitingCall.resolve(bounceValue);
                }
                waitingCall = { args, resolve, reject };
            }
        });
    };
}
