"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tsToTsx = void 0;
const glob_1 = __importDefault(require("glob"));
const lodash_1 = __importDefault(require("lodash"));
const upath_1 = __importDefault(require("upath"));
const deps_1 = require("../deps");
const file_utils_1 = require("../utils/file-utils");
function tsToTsx(config, context) {
    const srcDir = context.absoluteSrcDir;
    const allFiles = glob_1.default.sync(`${srcDir}/**/*.+(ts)`, {
        ignore: [`${srcDir}/**/node_modules/**/*`],
    });
    const existingFiles = lodash_1.default.groupBy(allFiles, (f) => upath_1.default.basename(f));
    config.projects.forEach((project) => {
        project.components.forEach((c) => {
            if (c.renderModuleFilePath.endsWith("ts")) {
                const relFilePath = file_utils_1.findSrcDirPath(context.absoluteSrcDir, c.renderModuleFilePath, existingFiles);
                const absFilePath = upath_1.default.join(context.absoluteSrcDir, relFilePath);
                if (file_utils_1.existsBuffered(absFilePath)) {
                    deps_1.logger.info(`rename file from ${absFilePath} to ${absFilePath}x`);
                    file_utils_1.renameFileBuffered(absFilePath, `${absFilePath}x`);
                }
                c.renderModuleFilePath = `${c.renderModuleFilePath}x`;
            }
        });
    });
    return config;
}
exports.tsToTsx = tsToTsx;
