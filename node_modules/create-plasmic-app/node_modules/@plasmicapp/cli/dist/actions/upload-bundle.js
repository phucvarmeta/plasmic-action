"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadJsBundle = void 0;
const pako_1 = __importDefault(require("pako"));
const file_utils_1 = require("../utils/file-utils");
const get_context_1 = require("../utils/get-context");
function uploadJsBundle(opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const context = yield get_context_1.getContext(opts);
        const api = context.api;
        yield api.uploadBundle(opts.project, opts.bundleName, pako_1.default.deflate(file_utils_1.readFileText(opts.bundleJsFile), { to: "string" }), opts.cssFiles.map((f) => pako_1.default.deflate(file_utils_1.readFileText(f), { to: "string" })), pako_1.default.deflate(file_utils_1.readFileText(opts.metaJsonFile), { to: "string" }), opts.genModulePath, opts.genCssPaths, opts.pkgVersion, opts.extraPropMetaJsonFile
            ? file_utils_1.readFileText(opts.extraPropMetaJsonFile)
            : undefined, opts.themeProviderWrapper, opts.themeModuleFile ? file_utils_1.readFileText(opts.themeModuleFile) : undefined);
    });
}
exports.uploadJsBundle = uploadJsBundle;
