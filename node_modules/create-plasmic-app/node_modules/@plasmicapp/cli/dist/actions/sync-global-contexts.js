"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGlobalContextsResourcePath = exports.syncGlobalContexts = void 0;
const lodash_1 = __importDefault(require("lodash"));
const deps_1 = require("../deps");
const code_utils_1 = require("../utils/code-utils");
const file_utils_1 = require("../utils/file-utils");
const COMPONENT_NAME = "PlasmicGlobalContextsProvider";
function syncGlobalContexts(context, projectMeta, projectConfig, projectLock, checksums, baseDir) {
    return __awaiter(this, void 0, void 0, function* () {
        const resourcePath = getGlobalContextsResourcePath(context, projectConfig);
        if (checksums.globalContextsChecksum && projectMeta.globalContextBundle) {
            if (context.cliArgs.quiet !== true) {
                deps_1.logger.info(`Syncing component: ${COMPONENT_NAME}@${projectLock.version}\t['${projectConfig.projectName}' ${projectConfig.projectId} ${projectConfig.version}]`);
            }
            if (context.config.code.lang === "js") {
                projectMeta.globalContextBundle.contextModule = code_utils_1.formatScript(code_utils_1.tsxToJsx(projectMeta.globalContextBundle.contextModule), baseDir);
            }
            file_utils_1.writeFileContent(context, resourcePath, projectMeta.globalContextBundle.contextModule, { force: true });
            projectConfig.globalContextsFilePath = resourcePath;
            const fl = projectLock.fileLocks.find((fl) => fl.assetId === projectConfig.projectId && fl.type === "globalContexts");
            if (fl) {
                fl.checksum = checksums.globalContextsChecksum;
            }
            else {
                projectLock.fileLocks.push({
                    assetId: projectConfig.projectId,
                    checksum: checksums.globalContextsChecksum,
                    type: "globalContexts",
                });
            }
        }
        else if (!checksums.globalContextsChecksum &&
            !projectMeta.globalContextBundle) {
            if (file_utils_1.fileExists(context, resourcePath)) {
                file_utils_1.deleteFile(context, resourcePath);
            }
            projectConfig.globalContextsFilePath = "";
            lodash_1.default.remove(projectLock.fileLocks, (fl) => fl.assetId === projectConfig.projectId && fl.type === "globalContexts");
        }
    });
}
exports.syncGlobalContexts = syncGlobalContexts;
function getGlobalContextsResourcePath(context, projectConfig) {
    return projectConfig.globalContextsFilePath !== ""
        ? projectConfig.globalContextsFilePath
        : file_utils_1.defaultResourcePath(context, projectConfig, `${COMPONENT_NAME}.${context.config.code.lang === "ts" ? "tsx" : "jsx"}`);
}
exports.getGlobalContextsResourcePath = getGlobalContextsResourcePath;
