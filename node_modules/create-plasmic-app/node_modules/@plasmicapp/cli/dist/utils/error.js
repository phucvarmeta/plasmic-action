"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleError = exports.HandledError = void 0;
const chalk_1 = __importDefault(require("chalk"));
const deps_1 = require("../deps");
const npm_utils_1 = require("./npm-utils");
/**
 * Represents an error that doesn't need to be forwarded to Sentry.
 * These are errors that are user-fault, for example:
 * - Using an old version of CLI
 */
class HandledError extends Error {
}
exports.HandledError = HandledError;
/**
 * Catches HandledErrors and just exits
 * Forwards all other errors along.
 * @param p
 * @returns
 */
exports.handleError = (p) => {
    return p.catch((e) => {
        if (e.message) {
            deps_1.logger.error(chalk_1.default.bold(chalk_1.default.redBright("\nPlasmic error: ")) + e.message);
        }
        // Check if we satisfy the engine policy first
        if (npm_utils_1.checkEngineStrict()) {
            // eslint-disable-next-line
            process.exit(1);
        }
        else if (e instanceof HandledError) {
            // eslint-disable-next-line
            process.exit(1);
        }
        else {
            throw e;
        }
    });
};
