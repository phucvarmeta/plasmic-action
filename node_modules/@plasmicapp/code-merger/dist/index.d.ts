import { Expression, JSXEmptyExpression, JSXExpressionContainer, JSXFragment, JSXSpreadChild, JSXText } from "@babel/types";
import { PlasmicASTNode, PlasmicTagOrComponent } from "./plasmic-ast";
import { CodeVersion } from "./plasmic-parser";
interface CodeVersions {
    newVersion: CodeVersion;
    editedVersion: CodeVersion;
    baseVersion: CodeVersion;
}
export declare const renameAndSerializePlasmicASTNode: (newNode: PlasmicASTNode, codeVersions: CodeVersions) => Expression | JSXEmptyExpression | JSXExpressionContainer | JSXSpreadChild | JSXFragment | JSXText | undefined;
export declare class ComponentSkeletonModel {
    readonly uuid: string;
    readonly nameInIdToUuid: Map<string, string>;
    readonly fileContent: string;
    constructor(uuid: string, nameInIdToUuid: Map<string, string>, fileContent: string);
    toJSON(): {
        uuid: string;
        nameInIdToUuid: [string, string][];
        fileContent: string;
    };
    static fromJsObject(jsObj: any): ComponentSkeletonModel;
}
export declare class ProjectSyncMetadataModel {
    readonly components: ComponentSkeletonModel[];
    constructor(components: ComponentSkeletonModel[]);
    toJSON(): ComponentSkeletonModel[];
    static fromJson(json: string): ProjectSyncMetadataModel;
}
export declare const makeCachedProjectSyncDataProvider: (rawProvider: ProjectSyncDataProviderType) => ProjectSyncDataProviderType;
export declare type ProjectSyncDataProviderType = (projectId: string, revision: number) => Promise<ProjectSyncMetadataModel>;
export declare type ComponentInfoForMerge = {
    editedFile: string;
    newFile: string;
    newNameInIdToUuid: Map<string, string>;
};
export declare class WarningInfo {
    private _rawWarnings;
    private _secondaryNodes;
    addRawWarn(msg: string): void;
    setSecondaryNodes(nodes: PlasmicTagOrComponent[]): void;
    rawWarnings(): string[];
    secondaryNodes(): PlasmicTagOrComponent[];
    maybeWarn(): void;
}
export declare const mergeFiles: (componentByUuid: Map<string, ComponentInfoForMerge>, projectId: string, projectSyncDataProvider: ProjectSyncDataProviderType, preMergeFile?: ((compId: string, baseSrc: string, baseNameInIdToUuid: Map<string, string>, newSrc: string, newNameInIdToUuid: Map<string, string>) => void) | undefined, appendJsxTreeOnMissingBase?: boolean | undefined, warningInfos?: Map<string, WarningInfo> | undefined) => Promise<Map<string, string> | undefined>;
export {};
