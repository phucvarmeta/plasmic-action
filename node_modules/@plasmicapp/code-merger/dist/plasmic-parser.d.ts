import * as babel from "@babel/core";
import { Node } from "@babel/traverse";
import { Expression } from "@babel/types";
import { PlasmicASTNode, PlasmicTagOrComponent } from "./plasmic-ast";
export declare const helperObject = "rh";
export declare const isJsxElementOrFragment: (n: Node) => boolean;
export declare const parseJSXExpressionOrContainerAsNodeList: (expr: Expression) => void;
export declare const parseFromJsxExpression: (input: string) => PlasmicASTNode;
export declare const makeShowCallCallee: (nameInId: string) => string;
export declare const makeShowCall: (nameInId: string) => string;
export declare const tryExtractPropertyNameOfMemberExpression: (callee: Node, object: string) => string | undefined;
export declare const memberExpressionMatch: (node: Node, object: string, member?: string | undefined) => boolean;
export declare const makeMemberExpression: (object: string, member: string) => babel.types.MemberExpression;
export declare const isCallIgnoreArguments: (call: Node, object: string, member: string) => call is babel.types.CallExpression;
export declare const isCallWithoutArguments: (call: Node, object: string, member: string) => boolean;
export declare class CodeVersion {
    readonly nameInIdToUuid: Map<string, string>;
    allTagOrComponents: Map<string, PlasmicTagOrComponent>;
    secondaryTagsOrComponents: Map<string, PlasmicTagOrComponent>;
    tagOrComponentsByUuid: Map<string, PlasmicTagOrComponent>;
    uuidToNameInId: Map<string, string>;
    root: PlasmicASTNode;
    private slotArgNameToUuid;
    private uuidToSlotArgName;
    constructor(rootExpr: string | Expression, nameInIdToUuid: Map<string, string>);
    renameJsxTree(targetCodeVersion: CodeVersion): CodeVersion;
    findMatchingNameInId(id: {
        nameInId: string;
        uuid: string;
    }): string | undefined;
    findMatchingSlotArgName(argName: string, uuid: string | undefined): string | undefined;
    findTagOrComponent(nameInId: string): PlasmicTagOrComponent | undefined;
    tryGetSlotArgUuid(argName: string): string | undefined;
    hasShowFuncCall(node: PlasmicTagOrComponent): boolean;
    hasClassNameIdAttr(node: PlasmicTagOrComponent): boolean;
    tryGetPropsIdSpreador(node: PlasmicTagOrComponent): babel.types.JSXAttribute | babel.types.JSXSpreadAttribute | undefined;
    hasPropsIdSpreador(node: PlasmicTagOrComponent): boolean;
}
