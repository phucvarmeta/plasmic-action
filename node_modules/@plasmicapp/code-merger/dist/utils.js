"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAttribute = exports.getAttrName = exports.tagName = exports.nodesDeepEqualIgnoreComments = exports.compactCode = exports.parseExpr = exports.formatted = exports.code = void 0;
const generator_1 = __importDefault(require("@babel/generator"));
const parser = __importStar(require("@babel/parser"));
const parser_typescript_1 = __importDefault(require("prettier/parser-typescript"));
const Prettier = __importStar(require("prettier/standalone"));
const common_1 = require("./common");
exports.code = (n, opts, unformatted) => {
    common_1.assert(n);
    const c = generator_1.default(n, opts).code;
    return unformatted ? c : exports.formatted(c);
};
exports.formatted = (c) => {
    return Prettier.format(c, {
        parser: "typescript",
        plugins: [parser_typescript_1.default],
        trailingComma: "none",
    });
};
function parseExpr(input) {
    return parser.parseExpression(input, {
        strictMode: false,
        plugins: ["jsx", "typescript"],
    });
}
exports.parseExpr = parseExpr;
exports.compactCode = (n) => {
    return exports.code(n, { comments: false, compact: true }, true);
};
exports.nodesDeepEqualIgnoreComments = (n1, n2) => {
    return exports.compactCode(n1) === exports.compactCode(n2);
};
exports.tagName = (jsxElement) => {
    // babel generator append ";" to the name. stirp it.
    return exports.code(jsxElement.openingElement.name).replace(";", "").trim();
};
exports.getAttrName = (attr) => {
    const name = attr.name;
    return name.type === "JSXIdentifier"
        ? name.name
        : `${name.namespace.name}.${name.name.name}`;
};
exports.isAttribute = (attr, expectedName) => {
    return attr.type === "JSXAttribute" && exports.getAttrName(attr) === expectedName;
};
