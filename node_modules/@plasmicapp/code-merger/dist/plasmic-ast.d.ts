import * as babel from "@babel/core";
import { Node } from "@babel/traverse";
import { Expression, JSXElement, JSXEmptyExpression, JSXExpressionContainer, JSXFragment, JSXSpreadChild, JSXText, StringLiteral } from "@babel/types";
export interface PlasmicNodeBase {
    rawNode: Expression | JSXEmptyExpression | JSXExpressionContainer | JSXSpreadChild | JSXFragment | JSXText;
}
export interface PlasmicOpaqueExpr extends PlasmicNodeBase {
    type: "opaque";
}
export interface PlasmicChildStringCall extends PlasmicNodeBase {
    type: "child-str-call";
    plasmicId: string;
    rawNode: Expression | JSXExpressionContainer;
}
export interface PlasmicStringLiteralExpr extends PlasmicNodeBase {
    type: "string-lit";
    value: string;
    rawNode: StringLiteral | JSXExpressionContainer;
}
export interface PlasmicJsxText extends PlasmicNodeBase {
    type: "text";
    value: string;
    rawNode: JSXText;
}
export interface PlasmicJSXFragment extends PlasmicNodeBase {
    type: "jsx-fragment";
    children: PlasmicASTNode[];
    rawNode: JSXFragment;
}
export interface PlasmicJsxElement extends PlasmicNodeBase {
    nameInId: string;
    attrs: Array<[string, PlasmicASTNode | null] | PlasmicASTNode>;
    children: PlasmicASTNode[];
    rawNode: JSXElement;
    rawParent: Node | undefined;
}
export interface PlasmicTagOrComponent extends PlasmicNodeBase {
    type: "tag-or-component";
    jsxElement: PlasmicJsxElement;
    rawNode: Expression | JSXExpressionContainer;
    secondaryNodes: PlasmicTagOrComponent[];
}
export declare type PlasmicASTNode = PlasmicTagOrComponent | PlasmicOpaqueExpr | PlasmicStringLiteralExpr | PlasmicJsxText | PlasmicChildStringCall | PlasmicJSXFragment;
export declare const makeCallExpression: (objectName: string, memberFuncName: string) => babel.types.CallExpression;
export declare const wrapInJsxExprContainer: (expr: Expression) => babel.types.JSXExpressionContainer;
